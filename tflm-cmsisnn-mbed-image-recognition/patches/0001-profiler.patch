From cc9095f83107a7ddd871b3cb139ab1e4ae4eeed3 Mon Sep 17 00:00:00 2001
From: Oscar Andersson <oscar.andersson@arm.com>
Date: Mon, 26 Jul 2021 15:42:59 +0200
Subject: [PATCH] profiler

---
 tensorflow/lite/micro/micro_profiler.h |  2 +-
 tensorflow/lite/micro/micro_time.cc    | 78 +++++++++++++++-----------
 tensorflow/lite/micro/micro_time.h     |  5 +-
 3 files changed, 51 insertions(+), 34 deletions(-)

diff --git a/tensorflow/lite/micro/micro_profiler.h b/tensorflow/lite/micro/micro_profiler.h
index 2366364..eba2fca 100644
--- a/tensorflow/lite/micro/micro_profiler.h
+++ b/tensorflow/lite/micro/micro_profiler.h
@@ -60,7 +60,7 @@ class MicroProfiler {
   // Maximum number of events that this class can keep track of. If we call
   // AddEvent more than kMaxEvents number of times, then the oldest event's
   // profiling information will be overwritten.
-  static constexpr int kMaxEvents = 50;
+  static constexpr int kMaxEvents = 75;
 
   const char* tags_[kMaxEvents];
   int32_t start_ticks_[kMaxEvents];
diff --git a/tensorflow/lite/micro/micro_time.cc b/tensorflow/lite/micro/micro_time.cc
index d7c51f9..fdfe324 100644
--- a/tensorflow/lite/micro/micro_time.cc
+++ b/tensorflow/lite/micro/micro_time.cc
@@ -1,4 +1,4 @@
-/* Copyright 2020 The TensorFlow Authors. All Rights Reserved.
+/* Copyright 2021 The TensorFlow Authors. All Rights Reserved.
 
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
@@ -13,47 +13,61 @@ See the License for the specific language governing permissions and
 limitations under the License.
 ==============================================================================*/
 
-// Reference implementation of timer functions.  Platforms are not required to
-// implement these timer methods, but they are required to enable profiling.
+#include "tensorflow/lite/micro/micro_time.h"
 
-// On platforms that have a POSIX stack or C library, it can be written using
-// methods from <sys/time.h> or clock() from <time.h>.
+// DWT (Data Watchpoint and Trace) registers, only exists on ARM Cortex with a
+// DWT unit.
+#define DWT_CONTROL (*((volatile uint32_t*)0xE0001000))
+/*!< DWT Control register */
 
-// To add an equivalent function for your own platform, create your own
-// implementation file, and place it in a subfolder with named after the OS
-// you're targeting. For example, see the Cortex M bare metal version in
-// tensorflow/lite/micro/bluepill/micro_time.cc or the mbed one on
-// tensorflow/lite/micro/mbed/micro_time.cc.
+// DWT Control register.
+#define DWT_CYCCNTENA_BIT (1UL << 0)
 
-#include "tensorflow/lite/micro/micro_time.h"
+// CYCCNTENA bit in DWT_CONTROL register.
+#define DWT_CYCCNT (*((volatile uint32_t*)0xE0001004))
 
-#if defined(TF_LITE_USE_CTIME)
-#include <ctime>
-#endif
+// DWT Cycle Counter register.
+#define DEMCR (*((volatile uint32_t*)0xE000EDFC))
 
-namespace tflite {
+// DEMCR: Debug Exception and Monitor Control Register.
+#define TRCENA_BIT (1UL << 24)
 
-#if !defined(TF_LITE_USE_CTIME)
+#define LAR (*((volatile uint32_t*)0xE0001FB0))
 
-// Reference implementation of the ticks_per_second() function that's required
-// for a platform to support Tensorflow Lite for Microcontrollers profiling.
-// This returns 0 by default because timing is an optional feature that builds
-// without errors on platforms that do not need it.
-int32_t ticks_per_second() { return 0; }
+#define DWT_CONTROL (*((volatile uint32_t*)0xE0001000))
 
-// Reference implementation of the GetCurrentTimeTicks() function that's
-// required for a platform to support Tensorflow Lite for Microcontrollers
-// profiling. This returns 0 by default because timing is an optional feature
-// that builds without errors on platforms that do not need it.
-int32_t GetCurrentTimeTicks() { return 0; }
+// Unlock access to DWT (ITM, etc.)registers.
+#define UnlockAccessToDWT() LAR = 0xC5ACCE55;
 
-#else  // defined(TF_LITE_USE_CTIME)
+// TRCENA: Enable trace and debug block DEMCR (Debug Exception and Monitor
+// Control Register.
+#define InitCycleCounter() DEMCR |= TRCENA_BIT
 
-// For platforms that support ctime, we implment the micro_time interface in
-// this central location.
-int32_t ticks_per_second() { return CLOCKS_PER_SEC; }
+#define ResetCycleCounter() DWT_CYCCNT = 0
+#define EnableCycleCounter() DWT_CONTROL |= DWT_CYCCNTENA_BIT
+#define DisableCycleCounter() DWT_CONTROL &= ~DWT_CYCCNTENA_BIT
+#define GetCycleCounter() DWT_CYCCNT
+
+namespace tflite {
 
-int32_t GetCurrentTimeTicks() { return clock(); }
-#endif
+constexpr int kClocksPerSecond = 216e6;
+int32_t ticks_per_second() {
+  return kClocksPerSecond;
+}
+
+int32_t GetCurrentTimeTicks() {
+  return GetCycleCounter();
+}
+
+void StartTimer() {
+  ResetCycleCounter();
+}
+
+void InitTimer() {
+  InitCycleCounter();
+  UnlockAccessToDWT();
+  EnableCycleCounter();
+  ResetCycleCounter();
+}
 
 }  // namespace tflite
diff --git a/tensorflow/lite/micro/micro_time.h b/tensorflow/lite/micro/micro_time.h
index fac9069..349705c 100644
--- a/tensorflow/lite/micro/micro_time.h
+++ b/tensorflow/lite/micro/micro_time.h
@@ -31,6 +31,9 @@ inline int32_t TicksToMs(int32_t ticks) {
                               static_cast<float>(ticks_per_second()));
 }
 
+void InitTimer();
+void StartTimer();
+
 }  // namespace tflite
 
-#endif  // TENSORFLOW_LITE_MICRO_MICRO_TIME_H_
+#endif  // TENSORFLOW_LITE_MICRO_MICRO_TIME_H_
\ No newline at end of file
-- 
2.25.1

